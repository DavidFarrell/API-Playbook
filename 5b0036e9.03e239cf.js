(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{108:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return h}));var i=n(0),o=n.n(i);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=o.a.createContext({}),p=function(e){var t=o.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},b=function(e){var t=p(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=o.a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,a=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),b=p(n),d=i,h=b["".concat(a,".").concat(d)]||b[d]||u[d]||r;return n?o.a.createElement(h,l(l({ref:t},c),{},{components:n})):o.a.createElement(h,l({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,a=new Array(r);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var c=2;c<r;c++)a[c]=n[c];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},80:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return p}));var i=n(3),o=n(7),r=(n(0),n(108)),a={id:"static_code_analysis",title:"Static Code Analysis Tools Spike Notes"},l={unversionedId:"static_code_analysis",id:"static_code_analysis",isDocsHomePage:!1,title:"Static Code Analysis Tools Spike Notes",description:"The decision from team discussion:",source:"@site/docs/static_code_analysis.md",slug:"/static_code_analysis",permalink:"/API-Playbook/static_code_analysis",editUrl:"https://github.com/LBHackney-IT/API-Playbook/edit/master/docs/static_code_analysis.md",version:"current",sidebar:"docs",previous:{title:"Linting",permalink:"/API-Playbook/linting"},next:{title:"Deployment Pipeline",permalink:"/API-Playbook/deployment_pipeline"}},s=[{value:"Use FxCop",id:"use-fxcop",children:[]},{value:"Running locally",id:"running-locally",children:[]},{value:"Running in the CI pipeline",id:"running-in-the-ci-pipeline",children:[]},{value:"Using FxCop (Website)",id:"using-fxcop-website",children:[]},{value:"Using Sonar (Website)",id:"using-sonar-website",children:[]}],c={toc:s};function p(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(i.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"The decision from team discussion:"),Object(r.b)("h2",{id:"use-fxcop"},"Use FxCop"),Object(r.b)("p",null,"  Using ReSharper Command Line Tools (Website):"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"      https://www.jetbrains.com/help/resharper/ReSharper_Command_Line_Tools.html\n")),Object(r.b)("p",null,"Spike PR:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"        https://github.com/LBHackney-IT/lbh-base-api/pull/19\n")),Object(r.b)("h2",{id:"running-locally"},"Running locally"),Object(r.b)("p",null,"This can be downloaded either as a NuGet package or directly from the Jetbrains Website."),Object(r.b)("p",null,"Decided to try this as the description mentions it being a stand-alone cross-platform tool and hypothesised that we could probably run the ",Object(r.b)("inlineCode",{parentName:"p"},"inspectcode.sh")," command in docker during the build."),Object(r.b)("p",null,"Outputs the results to a specified file format (.xml or .html)."),Object(r.b)("h2",{id:"running-in-the-ci-pipeline"},"Running in the CI pipeline"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"inspectcode")," script/executable, returns a \u201ccommand not found\u201d error in the build pipeline."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"}," Pros: ")),Object(r.b)("p",null,"The command-line tools are not dependent on a specific IDE."),Object(r.b)("p",null,"We could potentially have used this tool for both static-code analysis and linting. (So that we use only one tool)"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"}," Cons: ")),Object(r.b)("p",null,"The command-line tools do not seem to work well on macOS/Linux."),Object(r.b)("p",null,"Related Issue discussion:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"https://youtrack.jetbrains.com/issue/RSRP-466029\nhttps://youtrack.jetbrains.com/issue/RSRP-475696\n")),Object(r.b)("p",null,"To run the command line within a CI server, the server has to support windows and the Host OS of the container must be windows."),Object(r.b)("p",null,"No explicit documentation on how to set it up in a CI pipeline."),Object(r.b)("h2",{id:"using-fxcop-website"},"Using FxCop (Website)"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"(Spike branch: https://github.com/LBHackney-IT/lbh-base-api/tree/add-static-code-analysis-to-ci-pipeline)\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"}," Running locally ")),Object(r.b)("p",null,"This can be added to the project as a NuGet package."),Object(r.b)("p",null,"Hypothesis: FxCop runs code analysis when the project is built. So adding the FxCop NuGet package should allow us to run this locally and adding properties on the relevant project should cause this build to fail if there are any issues."),Object(r.b)("p",null,"Setting up the failures for specific errors should be possible by adding the relevant setting to the .editorConfig file and to the project\u2019s .csproj file."),Object(r.b)("p",null,"Outputs warnings and errors after building the project in the respective code editor."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"}," Running in the CI pipeline: ")),Object(r.b)("p",null,"Since the analyser runs when the project is built, it runs as part of the build stage of the pipeline and uses the same settings for running the analyser locally."),Object(r.b)("p",null,"  The warnings messages could be suppressed from showing in the build pipeline by setting: ",Object(r.b)("inlineCode",{parentName:"p"},"dotnet_analyzer_diagnostic.severity = none")," in the .editorConfig file."),Object(r.b)("p",null,"  You can also add:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"          <CodeAnalysisTreatWarningsAsErrors>false</CodeAnalysisTreatWarningsAsErrors>\n")),Object(r.b)("p",null,"to the relevant project\u2019s .csproj file."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"Any errors that we want the build to fail on could be set by:\n          `dotnet_diagnostic.<category or ruleId>.severity = error`\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"}," Pros: ")),Object(r.b)("p",null,"Simple to set up"),Object(r.b)("p",null,"Installation of NuGet package"),Object(r.b)("p",null,"Setup analyser settings in the .editorConfig and in the project file"),Object(r.b)("p",null,"No changes to current CI config needed."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"}," Cons: ")),Object(r.b)("p",null,"Depending on the volume of errors and the specificity of the errors we want to surface, this may require adding a lot of lines of code to the .editorConfig file."),Object(r.b)("p",null,"Doesn\u2019t seem to be an auto-correct function but this wasn\u2019t explored much for this spike."),Object(r.b)("p",null,"No explicit documentation on how to set it up in a CI pipeline."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"}," (At the time of the Spike) FxCop warnings found in the Base API and Test Project: ")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"}," FxCop Error categories we have decided to NOT suppress: ")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"CA1707: Identifiers should not contain underscores")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"CA1052: Static holder types should be Static or NotInheritable")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"CA1307: Specify StringComparison")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"CA1822: Mark members as static")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"CA1001: Types that own disposable fields should be disposable")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"CA1823: Avoid unused private fields")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"CA1051: Do not declare visible instance fields"))),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"}," FxCop Error Categories we have decided to suppress: ")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"CA1032: Implement standard exception constructors")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"CA1062: Validate arguments of public methods")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"CA1303: Do not pass literals as localized parameters"))),Object(r.b)("h2",{id:"using-sonar-website"},"Using Sonar (Website)"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"}," Setting up Sonar can be done following this blog here. ")),Object(r.b)("p",null,"This was explored before this spike, so not much work went into trying it for this spike."),Object(r.b)("p",null,"From the previous attempt by the HackIT devs, it seems this was relatively straightforward to set up but required setting it up via the UI.\nThere is also a Circeci Orb for Sonar."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"}," Why was this not explored much for this spike? ")),Object(r.b)("p",null,"FxCop was easier and quicker to setup"),Object(r.b)("p",null,"It was mentioned that when Sonar was set up, it was reporting the code to be fine, even though there was a deliberate error in code to test it."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"}," Pros (from documentation and discussion): ")),Object(r.b)("p",null,"Has it\u2019s own Circleci orb"),Object(r.b)("p",null,"Has documentation on how to set it up in a CI pipeline."),Object(r.b)("p",null,"The platform has a free & open source edition."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"}," Cons: "),"\nMay require to set up via their platform if using the NuGet package"),Object(r.b)("p",null,"The platform has other editions, so features may be limited if using the free & open source edition."))}p.isMDXComponent=!0}}]);