(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{128:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/naming_conventions-551ca835c35262bc6da8e9f9456d98dd.png"},73:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return l})),t.d(n,"default",(function(){return s}));var r=t(3),o=t(7),a=(t(0),t(86)),i={id:"naming_conventions",title:"Naming Conventions"},c={unversionedId:"naming_conventions",id:"naming_conventions",isDocsHomePage:!1,title:"Naming Conventions",description:"Name of the data source to represent the data:",source:"@site/docs/naming_conventions.md",slug:"/naming_conventions",permalink:"/API-Playbook/naming_conventions",editUrl:"https://github.com/LBHackney-IT/API-Playbook/edit/master/docs/naming_conventions.md",version:"current",sidebar:"docs",previous:{title:"Hackney API Implementation Guidelines",permalink:"/API-Playbook/api_implementation_guidelines"},next:{title:"Hackney DevOps practices",permalink:"/API-Playbook/branching_strategy"}},l=[],u={toc:l};function s(e){var n=e.components,i=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},u,i,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Name of the data source to represent the data:"),Object(a.b)("p",null,"Use \u2018-\u2019 to separate words"),Object(a.b)("p",null,"All lowercase."),Object(a.b)("p",null,"For eg : mosaic-resident-information-api"),Object(a.b)("p",null,"Use of Views ?"),Object(a.b)("p",null,"Actual API output : translate the inner column names"),Object(a.b)("p",null,"For each individual Platform API:"),Object(a.b)("p",null,Object(a.b)("img",{alt:"alt text",src:t(128).default})))}s.isMDXComponent=!0},86:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return b}));var r=t(0),o=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=o.a.createContext({}),s=function(e){var n=o.a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},p=function(e){var n=s(e.components);return o.a.createElement(u.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},f=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(t),f=r,b=p["".concat(i,".").concat(f)]||p[f]||m[f]||a;return t?o.a.createElement(b,c(c({ref:n},u),{},{components:t})):o.a.createElement(b,c({ref:n},u))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=f;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var u=2;u<a;u++)i[u]=t[u];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,t)}f.displayName="MDXCreateElement"}}]);